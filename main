#region Task 1
# print(
# """Twinkle, twinkle, little star,
#          How I wonder what you are!
#                   Up above the world so high,
#                   Like a diamond in the sky.
# Twinkle, twinkle, little star,
#          How I wonder what you are""")
#endregion

#region Task 2
# def calculate_circle_area(radius):
#     if radius < 0:
#         return "Радіус не може бути від'ємним"
#     else:
#         area = math.pi * (radius ** 2)
#         return area
#
# radius = float(input("Введіть радіус кола: "))
# circle_area = calculate_circle_area(radius)
# print("Площа кола з радіусом", radius, "дорівнює", circle_area)
#endregion

#region Task 3
# color_list = ['Red','Green','White','Black']
# print(color_list[0]," ",color_list[len(color_list)-1])
#endregion

#region Task 4
# def calculate_expression(n):
#     nn = int(str(n) * 2)  # створюємо nn
#     nnn = int(str(n) * 3)  # створюємо nnn
#     result = n + nn + nnn
#     return result
#
# n = input("Введіть число: ")
# result = calculate_expression(int(n))
# print("Результат для n =", n, "дорівнює", result)
#endregion

#region Task 5
# numbers = [386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615,
#            953, 345, 399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626,
#             949, 687, 217, 815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, 958,743, 527]
#
#
# for num in numbers:
#     if num % 2 == 0:
#         print(num)
#     elif num == 237:
#         break
#endregion

#region Task 6
# def check_sequence(s):
#     length = len(s)
#     i = 0
#     while i < length:
#         if s[i] == '0':
#
#             count_zeros = 0
#             while i < length and s[i] == '0':
#                 count_zeros += 1
#                 i += 1
#             count_ones = 0
#             while i < length and s[i] == '1':
#                 count_ones += 1
#                 i += 1
#             if count_zeros != count_ones:
#                 return False
#         else:
#
#             count_ones = 0
#             while i < length and s[i] == '1':
#                 count_ones += 1
#                 i += 1
#             count_zeros = 0
#             while i < length and s[i] == '0':
#                 count_zeros += 1
#                 i += 1
#             if count_zeros != count_ones:
#                 return False
#     return True
#
#
# sequence1 = "01010101"
# print(check_sequence(sequence1))
#
# sequence2 = "00011100011"
# print(check_sequence(sequence2))
#
# sequence3 = "00001100001111"
# print(check_sequence(sequence3))
#endregion

#region Task 7
# def print_even_numbers(n, m):
#     start = -n
#     end = n
#     step = m
#     if step <= 0:
#         print("Крок має бути більше 0.")
#         return
#     for num in range(start, end + 1, step):
#         if num % 2 == 0:
#             print(num)
#
#
# student_number = 19
# n = 100
# print("Парні числа від -{} до {} з кроком {}: ".format(n, n, student_number))
# print_even_numbers(n, student_number)
#endregion

#region Task 9
# my_list = [1, 2, 3, 4, 5]
# print("Початковий список:", my_list)
#
#
# my_list.extend([3, 6, 7])
# print("a.) Розширений список:", my_list)
#
#
# my_list.insert(1, 33333)
# print("б.) Список після вставки 33333 на другий елемент:", my_list)
#
#
# my_list.reverse()
# print("в.) Список у зворотньому порядку:", my_list)
#
#
# my_list.append(3)
# print("г.) Список після додавання 3 до кінця:", my_list)
#
#
# my_list.remove(3)
# print("д.) Список після видалення першого елемента зі значенням 3:", my_list)
#
#
# my_list.sort()
# print("е.) Список у порядку збільшення:", my_list)
#
#
# my_list.clear()
# print("ж.) Порожній список після очищення:", my_list)
#endregion
